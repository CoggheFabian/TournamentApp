// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TournamentApp.Model;

namespace TournamentApp.Model.Migrations
{
    [DbContext(typeof(TournamentDbContext))]
    partial class TournamentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TournamentApp.Model.Leaderboard", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.ToTable("Leaderboards");

                    b
                        .HasAnnotation("Relational:SqlQuery", "select U1.Name, sum(case when U1.Id = Matches.Player1Id then Matches.ScorePlayer1 else Matches.ScorePlayer2 end)  as score from Matches left join Users U1 on Matches.Player1Id = U1.Id or Matches.Player2Id = U1.Id where IsMatchPlayed = 1 group by U1.Name");
                });

            modelBuilder.Entity("TournamentApp.Model.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuizName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuizOwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizOwnerId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("TournamentApp.Model.QuizRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaxRoundScore")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("TournamentApp.Model.RoundUserPoints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("QuizRoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizRoundId");

                    b.ToTable("RoundUserPoints");
                });

            modelBuilder.Entity("TournamentApp.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TournamentApp.Model.Quiz", b =>
                {
                    b.HasOne("TournamentApp.Model.User", "QuizOwner")
                        .WithMany()
                        .HasForeignKey("QuizOwnerId");

                    b.Navigation("QuizOwner");
                });

            modelBuilder.Entity("TournamentApp.Model.QuizRound", b =>
                {
                    b.HasOne("TournamentApp.Model.Quiz", "Quiz")
                        .WithMany("Rounds")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("TournamentApp.Model.RoundUserPoints", b =>
                {
                    b.HasOne("TournamentApp.Model.QuizRound", null)
                        .WithMany("UserPointsList")
                        .HasForeignKey("QuizRoundId");
                });

            modelBuilder.Entity("TournamentApp.Model.Quiz", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("TournamentApp.Model.QuizRound", b =>
                {
                    b.Navigation("UserPointsList");
                });
#pragma warning restore 612, 618
        }
    }
}
